'use server';
/**
 * @fileOverview Generates an optimized prompt based on project summary, content, and user customizations.
 *
 * - generateOptimizedPrompt - A function that generates the final optimized prompt.
 * - GenerateOptimizedPromptInput - The input type for the generateOptimizedPrompt function.
 * - GenerateOptimizedPromptOutput - The return type for the generateOptimizedPrompt function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

// Input schema for the final prompt generation flow
const GenerateOptimizedPromptInputSchema = z.object({
  industry: z.string().describe('The industry of the project.'),
  projectSummary: z.string().describe('The AI-generated summary of the project data.'),
  combinedFileTextContent: z.string().describe('The combined extracted text content of the project files.'),
  customizations: z.array(z.string()).describe('A list of user-provided customization details or requirements.'),
});
export type GenerateOptimizedPromptInput = z.infer<typeof GenerateOptimizedPromptInputSchema>;

// Output schema for the final prompt generation flow
const GenerateOptimizedPromptOutputSchema = z.object({
  optimizedPrompt: z.string().describe('The final, optimized prompt generated by the AI.'),
});
export type GenerateOptimizedPromptOutput = z.infer<typeof GenerateOptimizedPromptOutputSchema>;


// Publicly exported function to handle final prompt generation
export async function generateOptimizedPrompt(
  input: GenerateOptimizedPromptInput
): Promise<GenerateOptimizedPromptOutput> {
   return generateOptimizedPromptFlow(input);
}


// Prompt for generating the final optimized prompt
const optimizedPromptTemplate = `You are an expert AI Prompt Engineer specializing in creating effective prompts for various AI models.\nYour goal is to generate a single, well-structured, and optimized prompt that can be used in other AI software.\n\nBase the prompt on the following information:\n- Industry: ` + "{{industry}}" + `\n- Project Summary:\n\n\u0060\u0060\u0060\n` + "{{projectSummary}}" + `\n\u0060\u0060\u0060\n- Combined Project Data Content (for context):\n\u0060\u0060\u0060\n` + "{{combinedFileTextContent}}" + `\n\u0060\u0060\u0060\n- User-Provided Customizations/Requirements:\n` + "{{#if customizations}}" + `\n` + "{{#each customizations}}" + `\n- ` + "{{this}}" + `\n` + "{{/each}}" + `\n` + "{{else}}" + `\n- (No specific user customizations provided)\n` + "{{/if}}" + `\n\nInstructions for the prompt you generate:\n1.  **Synthesize Information:** Combine insights from the summary, original content, and user customizations.\n2.  **Clarity and Conciseness:** Be clear, specific, and avoid ambiguity.\n3.  **Action-Oriented:** Phrase the core request as a clear instruction to an AI model.\n4.  **Contextual Relevance:** Ensure the prompt reflects the project's industry and key details.\n5.  **Incorporate Customizations:** Integrate the user's requirements naturally into the prompt structure.\n6.  **Output Focus:** If the user specified a desired output format or style, include that in the prompt.\n7.  **Structure:** Use formatting (like markdown lists or sections if appropriate) to make the generated prompt easy for another AI to understand.\n8.  **Tone:** Use a professional, direct, and instructional tone. Avoid conversational or ambiguous language.\n9.  **Validation:** Ensure the prompt includes all required sections and is under 500 words.\n10. **Few-Shot Example:** For complex or domain-specific outputs, include a short example at the end of the prompt, formatted as:\n---\nExample Output:\n[Insert a concise, relevant example based on the provided context.]\n---\n11. **Do NOT add conversational elements:** The final output should be *only* the prompt itself, ready to be copied and pasted. Do not include phrases like "Here is the optimized prompt:" or explanations about the prompt.\n\nGenerate the optimized prompt now.`;

const generateOptimizedPromptDefinition = ai.definePrompt({
  name: 'generateOptimizedPromptDefinition',
  input: { schema: GenerateOptimizedPromptInputSchema },
  output: { schema: GenerateOptimizedPromptOutputSchema },
  prompt: optimizedPromptTemplate,
});

// Internal flow definition for generating the final prompt
const generateOptimizedPromptFlow = ai.defineFlow<
  typeof GenerateOptimizedPromptInputSchema,
  typeof GenerateOptimizedPromptOutputSchema
>({
  name: 'generateOptimizedPromptFlow',
  inputSchema: GenerateOptimizedPromptInputSchema,
  outputSchema: GenerateOptimizedPromptOutputSchema,
},
async (input) => {
  const {output} = await generateOptimizedPromptDefinition(input);
  if (!output) {
    throw new Error("AI optimized prompt generation returned no output.");
  }
  return output;
});
