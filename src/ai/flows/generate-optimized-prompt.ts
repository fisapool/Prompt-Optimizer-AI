'use server';
/**
 * @fileOverview Generates an optimized prompt based on project summary, content, and user customizations.
 *
 * - generateOptimizedPrompt - A function that generates the final optimized prompt.
 * - GenerateOptimizedPromptInput - The input type for the generateOptimizedPrompt function.
 * - GenerateOptimizedPromptOutput - The return type for the generateOptimizedPrompt function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

// Input schema for the final prompt generation flow
const GenerateOptimizedPromptInputSchema = z.object({
  industry: z.string().describe('The industry of the project.'),
  projectSummary: z.string().describe('The AI-generated summary of the project data.'),
  combinedFileTextContent: z.string().describe('The combined extracted text content of the project files.'),
  customizations: z.array(z.string()).describe('A list of user-provided customization details or requirements.'),
});
export type GenerateOptimizedPromptInput = z.infer<typeof GenerateOptimizedPromptInputSchema>;

// Output schema for the final prompt generation flow
const GenerateOptimizedPromptOutputSchema = z.object({
  optimizedPrompt: z.string().describe('The final, optimized prompt generated by the AI.'),
});
export type GenerateOptimizedPromptOutput = z.infer<typeof GenerateOptimizedPromptOutputSchema>;


// Publicly exported function to handle final prompt generation
export async function generateOptimizedPrompt(
  input: GenerateOptimizedPromptInput
): Promise<GenerateOptimizedPromptOutput> {
   return generateOptimizedPromptFlow(input);
}


// Prompt for generating the final optimized prompt
const generateOptimizedPromptDefinition = ai.definePrompt({
  name: 'generateOptimizedPromptDefinition',
  input: { schema: GenerateOptimizedPromptInputSchema },
  output: { schema: GenerateOptimizedPromptOutputSchema },
  prompt: `You are an expert AI Prompt Engineer specializing in creating effective prompts for various AI models.
Your goal is to generate a single, well-structured, and optimized prompt that can be used in other AI software.

Base the prompt on the following information:
- Industry: {{{industry}}}
- Project Summary:
\`\`\`
{{{projectSummary}}}
\`\`\`
- Combined Project Data Content (for context):
\`\`\`
{{{combinedFileTextContent}}}
\`\`\`
- User-Provided Customizations/Requirements:
{{#if customizations}}
{{#each customizations}}
- {{{this}}}
{{/each}}
{{else}}
- (No specific user customizations provided)
{{/if}}

Instructions for the prompt you generate:
1.  **Synthesize Information:** Combine insights from the summary, original content, and user customizations.
2.  **Clarity and Conciseness:** Be clear, specific, and avoid ambiguity.
3.  **Action-Oriented:** Phrase the core request as a clear instruction to an AI model.
4.  **Contextual Relevance:** Ensure the prompt reflects the project's industry and key details.
5.  **Incorporate Customizations:** Integrate the user's requirements naturally into the prompt structure.
6.  **Output Focus:** If the user specified a desired output format or style, include that in the prompt.
7.  **Structure:** Use formatting (like markdown lists or sections if appropriate) to make the generated prompt easy for another AI to understand.
8.  **Do NOT add conversational elements:** The final output should be *only* the prompt itself, ready to be copied and pasted. Do not include phrases like "Here is the optimized prompt:" or explanations about the prompt.

Generate the optimized prompt now.`,
});

// Internal flow definition for generating the final prompt
const generateOptimizedPromptFlow = ai.defineFlow<
  typeof GenerateOptimizedPromptInputSchema,
  typeof GenerateOptimizedPromptOutputSchema
>({
  name: 'generateOptimizedPromptFlow',
  inputSchema: GenerateOptimizedPromptInputSchema,
  outputSchema: GenerateOptimizedPromptOutputSchema,
},
async (input) => {
  const {output} = await generateOptimizedPromptDefinition(input);
  if (!output) {
    throw new Error("AI optimized prompt generation returned no output.");
  }
  return output;
});
